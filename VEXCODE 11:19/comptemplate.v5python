{"mode":"Text","textContent":"#Purpose:\n#    To locate and find all of our functions\n#\n#Imports:\nfrom vex import *\n#\n#Objects:\n#    Used for defining the robot\nbrain=Brain()\ncontroller_1 = Controller(PRIMARY)\nmotor_21 = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT17, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n# Define the front left motor\nfront_left_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n# Define the front right motor\nfront_right_motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n# Define the back left motor\nback_left_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# Define the back right motor\nback_right_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n\n# Define the motor group for the front two motors\nmotor_group_front = MotorGroup(front_left_motor, front_right_motor)\n# Define the motor group for the back two motors\nmotor_group_back = MotorGroup(back_left_motor, back_right_motor)\n# Define the motor group for the left two motors\nmotor_group_left = MotorGroup(back_left_motor, front_left_motor)\n# Define the motor group for the right two motors\nmotor_group_right = MotorGroup(back_right_motor, front_right_motor)\n\n# Define the drivetrain group for moving forwards and backwards\ndrivetrain_normal = DriveTrain(front_left_motor, front_right_motor, back_left_motor, back_right_motor)\n# Define the drivetrain group for strafing left and right\ndrivetrain_strafe = DriveTrain(motor_group_back, motor_group_front)\n#\n#Notes:\n#    Wheel Circumference = 30\n#    Distance between wheels = Unknown\n#\n#Called from:\n#    Where we are pulling function library from. Unknown\n#\n#Author:\n#    Sarah Alf and Vikhashini Ananth\n#\n#Notes:\n#    What notes can you add\n#\n#History:\n#        21-01-31    created    (who modified)\n#        YY-MM-DD    modified    (who modified)    #(what was done)\n#\n#Functions:\n#Function Sample:\n#def f_function_name(parameter)\n#   print(‘f_function_name Start running’)\n#    Insert Function Code Here\n#   print(‘f_function_name stop running’)\n#\n\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\n\n\n# Begin project code\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    while True:\n        #region VEXcode Generated Robot Configuration\n\n# Loop the code segment\n\nwhile True:\n\n    # Variable to set the speed for the front left motor based on controller joystick position\n    front_left_speed = controller_1.axis3.position() + controller_1.axis4.position() + controller_1.axis1.position()\n    # Variable to set the speed for the front right motor based on controller joystick position\n    front_right_speed = controller_1.axis3.position() - controller_1.axis4.position() - controller_1.axis1.position()\n    # Variable to set the speed for the back left motor based on controller joystick position\n    back_left_speed = controller_1.axis3.position() - controller_1.axis4.position() + controller_1.axis1.position()\n    # Variable to set the speed for the back right motor based on controller joystick position\n    back_right_speed = controller_1.axis3.position() + controller_1.axis4.position() - controller_1.axis1.position()\n\n    # Spin Motors\n    front_left_motor.spin(FORWARD, front_left_speed, PERCENT)\n    front_right_motor.spin(FORWARD, front_right_speed, PERCENT)\n    back_left_motor.spin(FORWARD, back_left_speed, PERCENT)\n    back_right_motor.spin(FORWARD, back_right_speed, PERCENT)\n\n\ndef forward(direction, speed, speedunits, distance, distanceunits):\n    drivetrain_normal.set_drive_velocity(speed, speedunits)\n    drivetrain_normal.drive_for(direction, distance, distanceunits)\n\nforward(FORWARD, 100, PERCENT, 200, MM)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}