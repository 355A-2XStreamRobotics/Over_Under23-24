{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------------------------------\n#\n# X-Drive Code\n#\n# created 11/12/2023\n#\n# modified 11/18/2023\n# \n# ------------------------------------------------------------------\n\n# Define the front left motor\nfront_left_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n# Define the front right motor\nfront_right_motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n# Define the back left motor\nback_left_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# Define the back right motor\nback_right_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n# Define a motor group with the front two motors\nfront_motors = MotorGroup(front_left_motor, front_right_motor)\n# Define a motor group with the back two motors\nback_motors = MotorGroup(back_left_motor, back_right_motor)\n# Define a drivetrain with the front motor and back motor groups\ndrivetrain_strafe = DriveTrain(back_motors, front_motors, 319.19, 295, 40, MM, 1)\n\n# Functions\n# Define a function to drive either forward or backward\ndef driving(direction, speed, speedunits, dist, distanceunits):\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain.set_drive_velocity(speed, speedunits)\n    # Drives the drivetrain for the input variables direction and distance\n    drivetrain.drive_for(direction, dist, distanceunits)\n\n# Define a function to strafe either left or right\ndef strafe(direction, speed, speedunits, dist, distanceunits):\n    # Sets a variable so the input can be LEFT or RIGHT in order to avoid confusion\n    side = FORWARD if direction == LEFT else REVERSE\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain_strafe.set_drive_velocity(speed, speedunits)\n    # Strafes the drivetrain for the input variables side and distance\n    drivetrain_strafe.drive_for(side, dist, distanceunits)\n\n# Define a function to rotate either left or right\ndef rotate(direction, speed, speedunits, ang):\n    # Sets the speed of the drivetrain rotation to the input variable speed\n    drivetrain.set_turn_velocity(speed, speedunits)\n    # Rotates the robot for the input variables direction and ang\n    drivetrain.turn_for(direction, ang, DEGREES)\n# End functions\n\n# auton code\ndef autonomous():\n    #Set Start Speed to 50% Increase with testing\n    drivetrain.set_drive_velocity(100, PERCENT)\n\n    drivetrain.drive_for(FORWARD, 3100, MM) \n#end auton code\n\n# Driver control code\ndef driver_control():\n    while True:\n        if controller_1.buttonY.pressing():\n            if controller_1.buttonRight.pressing():\n                drivetrain.stop()\n            else:\n                # Move the robot backwards from the wall\n                drivetrain.drive_for(REVERSE, 100, MM)\n                # Rotate the robot 90 degrees to the left\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n                # Move the robot to 1 inch from the wall\n                drivetrain.drive_for(FORWARD, 100, MM)\n                # Rotate the robot 45 degrees to the left\n                drivetrain.turn_for(LEFT, 45, DEGREES)\n                # Move the robot until it is past the bar\n                drivetrain.drive_for(FORWARD, 300, MM)\n                \n        \n        else:\n\n            # Variable to set the speed for the front left motor based on controller joystick position\n            front_left_speed = controller_1.axis3.position() + controller_1.axis4.position() + controller_1.axis1.position()\n            # Variable to set the speed for the front right motor based on controller joystick position\n            front_right_speed = controller_1.axis3.position() - controller_1.axis4.position() - controller_1.axis1.position()\n            # Variable to set the speed for the back left motor based on controller joystick position\n            back_left_speed = controller_1.axis3.position() - controller_1.axis4.position() + controller_1.axis1.position()\n            # Variable to set the speed for the back right motor based on controller joystick position\n            back_right_speed = controller_1.axis3.position() + controller_1.axis4.position() - controller_1.axis1.position()\n\n            # Spin the front left motor based on the controller joystick position\n            front_left_motor.spin(FORWARD, front_left_speed, PERCENT)\n            # Spin the front right motor based on the controller joystick position\n            front_right_motor.spin(FORWARD, front_right_speed, PERCENT)\n            # Spin the back left motor based on the controller joystick position\n            back_left_motor.spin(FORWARD, back_left_speed, PERCENT)\n            # Spin the back right motor based on the controller joystick position\n            back_right_motor.spin(FORWARD, back_right_speed, PERCENT)\n\n    \n        # End autopilot code\n# End driver control code\n\n# Define the competition to run auton and driver control during matches\ncompetition = Competition(driver_control, autonomous)\n\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}