{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ngps6 = Gps(Ports.PORT6, 0.00, -180.00, MM, 180)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT7)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\nflywheel = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\ncontroller_1 = Controller(PRIMARY)\ncyls = DigitalOut(brain.three_wire_port.h)\narm_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_36_1, True)\narm_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_36_1, False)\narm = MotorGroup(arm_motor_a, arm_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------------------------------------------\n#\n#   Project:            Drive to Location (Unknown Starting Position)\n#\tDescription:        This example will show how to use a GPS Sensor to\n#                       navigate a V5 Moby Hero Bot to a specified position by\n#                       driving along the X-axis then the Y-axis\n#   Starting Position:  Any\n#   Configuration:      V5 Hero Bot (Drivetrain 2-motor, Inertial)\n#                       Motor Group on Port 2 and 9\n#                       Rotation on Port 4\n#                       GPS on Port 8\n#                       Distance on Port 12\n#                       Optical on Port 19\n#                       Distance on Port 20\n#                       Bumper on 3-Wire Port A\n#\n# ------------------------------------------------------------------------------\n\n# Library imports\nfrom vex import *\n\nreference_angle = 0\n\n# Define the front left motor\nfront_left_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n# Define the front right motor\nfront_right_motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n# Define the back left motor\nback_left_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# Define the back right motor\nback_right_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n# Define a motor group with the front two motors\nfront_motors = MotorGroup(front_left_motor, front_right_motor)\n# Define a motor group with the back two motors\nback_motors = MotorGroup(back_left_motor, back_right_motor)\n# Define a drivetrain with the front motor and back motor groups\ndrivetrain_strafe = DriveTrain(back_motors, front_motors, 319.19, 295, 40, MM, 1)\n#FLYWHEEL\nflywheel = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nflywheel.set_stopping(COAST)\n\ndef drive_to_position_y(y):\n    global reference_angle\n\n    # Reorient the robot before driving along the Y-axis\n    if gps6.y_position(MM) < y:\n        reference_angle = 0\n    else:\n        reference_angle = 180\n\n    # Using an absolute reference angle along with the GPS heading,\n    # we can turn the robot to face the correct direction\n    # before driving along the Y-axis\n    drivetrain.turn_for(RIGHT, (reference_angle - gps6.heading()), DEGREES)\n    drivetrain.drive(FORWARD)\n\n    # Keep driving until the GPS position for the Y-axis\n    # is within 20mm of the target Y position\n    while not (gps6.y_position(MM) - y > -20\n               and gps6.y_position(MM) - y < 20):\n        wait(5, MSEC)\n\n    # This will allow the drivetrain to stop in time,\n    # preventing the robot from overshooting the target\n    drivetrain.stop()\n\n\ndef drive_to_position_x(x):\n    global reference_angle\n\n    # Reorient the robot before driving along the X-axis\n    if gps6.x_position(MM) < x:\n        reference_angle = 90\n    else:\n        reference_angle = 270\n\n    # Using an absolute reference angle along with the GPS heading,\n    # we can turn the robot to face the correct direction\n    # before driving along the X-axis\n    drivetrain.turn_for(RIGHT, (reference_angle - gps6.heading()), DEGREES)\n    drivetrain.drive(FORWARD)\n\n    # Keep driving until the GPS position for the X-axis\n    # is within 20mm of the target X position\n    while not (gps6.x_position(MM) - x > -20\n               and gps6.x_position(MM) - x < 20):\n        wait(5, MSEC)\n\n    # This will allow the drivetrain to stop in time,\n    # preventing the robot from overshooting the target\n    drivetrain.stop()\n\n\ndef print_position():\n    # Print GPS position values to the V5 Brain\n    brain.screen.print(\"X: \", gps6.x_position(MM))\n    brain.screen.print(\"  Y: \", gps6.y_position(MM))\n    brain.screen.next_row()\n\n# Calibrate the Drivetrain for accurate turning\ncalibrate_drivetrain()\n\n# Calibrate the GPS Sensor\ngps6.calibrate()\nwhile gps6.is_calibrating():\n    sleep(25, MSEC)\n\ndrivetrain.set_turn_velocity(25, PERCENT)\n\n# Print the starting position of the robot\nprint_position()\n\n# Print the ending position of the robot\nbrain.screen.clear_screen()\nprint_position()\nflywheel.set_stopping(COAST)\nflywheel.set_velocity(100,PERCENT)\ndrivetrain.set_drive_velocity(55, PERCENT)\n# drive reverse to pipe\ndrivetrain.drive_for(REVERSE, 280, MM)\n# turn 45 degrees to the left\ndrivetrain.turn_for(LEFT, 45, DEGREES)\n# drive reverse until touching pipe\n#drivetrain.drive_for(REVERSE, 20, MM)\ndrivetrain.drive_for(REVERSE, 40, MM)\n# spin flywheel for 30 seconds\nflywheel.spin(FORWARD)\n#wait(60,SECONDS)\n# with testing, we found that the best duration for the flywheel is 50 seconds\nwait(2,SECONDS)\nflywheel.stop()\n# move forward 50 mm so it doesnt catch when it turns\ndrivetrain.drive_for(FORWARD, 50, MM)\n# turn 45 degrees to the right\ndrivetrain.turn_for(RIGHT, 45, DEGREES)\n# raise the arm\narm.spin_for(REVERSE,375,DEGREES)\n# drive to the elevation bar\ndrive_to_position_y(-10)\n# raise the robot\ncyls.set(False)\narm.spin_for(FORWARD,50,DEGREES)\narm.spin_for(REVERSE,50,DEGREES)\n\n\n\n# turn left 90 degrees\n#drivetrain.turn_for(LEFT, 90, DEGREES)\n# drive forward 1 field tile\n# turn left 90 degrees\n#drivetrain.turn_for(LEFT, 90, DEGREES)\n# drive forward 1 field tile\n# turn right 90 degrees\n#drivetrain.turn_for(RIGHT, 90, DEGREES)\n# drive forward 1 field tile\n# turn right 90 degrees\n#drivetrain.turn_for(RIGHT, 90, DEGREES)\n# push tri-balls into goal\n# reverse to half tile away from middle pipe to grab more tri-balls\n# turn left 90 degrees\n# drive forward half of a field tile\n# turn right 90 degrees\n#drivetrain.turn_for(RIGHT, 90, DEGREES)\n# drive forward into goal\n# reverse to half tile away from middle pipe to grab more tri-balls\n# turn left 90 degrees\n# drive forward half of a field tile\n# turn right 90 degrees\n#drivetrain.turn_for(RIGHT, 90, DEGREES)\n# drive forward into goal\n","textLanguage":"python","rconfig":[{"port":[6],"name":"gps6","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"-180","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22},{"port":[1,3,2,4,7],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"cyls","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[8,9],"name":"arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"}}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}