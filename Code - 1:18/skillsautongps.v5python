{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ngps_6 = Gps(Ports.PORT6, 0.00, -200.00, MM, 180)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT7)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\n# Define the front left motor\nfront_left_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n# Define the front right motor\nfront_right_motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n# Define the back left motor\nback_left_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# Define the back right motor\nback_right_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n# Define a motor group with the front two motors\nfront_motors = MotorGroup(front_left_motor, front_right_motor)\n# Define a motor group with the back two motors\nback_motors = MotorGroup(back_left_motor, back_right_motor)\n# Define a drivetrain with the front motor and back motor groups\ndrivetrain_strafe = DriveTrain(back_motors, front_motors, 319.19, 295, 40, MM, 1)\n#FLYWHEEL\nflywheel = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nflywheel.set_stopping(COAST)\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 1)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n# define a task that will handle monitoring inputs from controller_\nreference_angle = 0\n\ndef drive_to_position_y(y):\n    global reference_angle\n    # Reorient the robot before driving along the Y-axis\n    if gps_6.y_position(MM) < y:\n        reference_angle = 0\n    else:\n        reference_angle = 180\n    # Using an absolute reference angle along with the GPS heading,\n    # we can turn the robot to face the correct direction\n    # before driving along the Y-axis\n    drivetrain.turn_for(RIGHT, (reference_angle - gps_6.heading()), DEGREES)\n    drivetrain.drive(FORWARD)\n    # Keep driving until the GPS position for the Y-axis\n    # is within 20mm of the target Y position\n    while not (gps_6.y_position(MM) - y > -20 and gps_6.y_position(MM) - y < 20):\n        wait(5, MSEC)\n        # This will allow the drivetrain to stop in time,\n        # preventing the robot from overshooting the target\n        drivetrain.stop()\n\ndef drive_to_position_x(x):\n    global reference_angle\n    # Reorient the robot before driving along the X-axis\n    if gps_6.x_position(MM) < x:\n        reference_angle = 90\n    else:\n        reference_angle = 270\n    # Using an absolute reference angle along with the GPS heading,\n    # we can turn the robot to face the correct direction\n    # before driving along the X-axis\n    drivetrain.turn_for(RIGHT, (reference_angle - gps_6.heading()), DEGREES)\n    drivetrain.drive(FORWARD)\n    # Keep driving until the GPS position for the X-axis\n    # is within 20mm of the target X position\n    while not (gps_6.x_position(MM) - x > -20 and gps_6.x_position(MM) - x < 20):\n        wait(5, MSEC)\n        # This will allow the drivetrain to stop in time,\n        # preventing the robot from overshooting the target\n        drivetrain.stop()\n\ndef print_position():\n    # Print GPS position values to the V5 Brain\n    brain.screen.print(\"X: \", gps_6.x_position(MM))\n    brain.screen.print(\" Y: \", gps_6.y_position(MM))\n    brain.screen.next_row()\n    \n# Calibrate the Drivetrain for accurate turning\ncalibrate_drivetrain()\n# Calibrate the GPS Sensor\ngps_6.calibrate()\nwhile gps_6.is_calibrating():\n    sleep(25, MSEC)\n\ndrivetrain.set_turn_velocity(25, PERCENT)\n# Print the starting position of the robot\n#region VEXcode Generated Robot Configuration\n\n# Define a function to drive either forward or backward\ndef driving(direction, speed, speedunits, dist, distanceunits):\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain.set_drive_velocity(speed, speedunits)\n    # Drives the drivetrain for the input variables direction and distance\n    drivetrain.drive_for(direction, dist, distanceunits)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # Specify the X/Y position to drive to\n    drive_to_position_x(-1500)\n    drive_to_position_y(-900)\n    # Print the ending position of the robot\n    drive_to_position_x(-900)\n    drive_to_position_y(-300)\n    drive_to_position_x(0) \n    print_position()\n# place automonous code here\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    while True:\n        wait(20, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}