{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------------------------------\n#\n# X-Drive Code\n#\n# created 11/12/2023\n#\n# modified 11/18/2023\n# \n# ------------------------------------------------------------------\n\n# Define the front left motor\nfront_left_motor = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n# Define the front right motor\nfront_right_motor = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n# Define the back left motor\nback_left_motor = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n# Define the back right motor\nback_right_motor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\n# Define a motor group with the front two motors\nfront_motors = MotorGroup(front_left_motor, front_right_motor)\n# Define a motor group with the back two motors\nback_motors = MotorGroup(back_left_motor, back_right_motor)\n# Define a drivetrain with the front motor and back motor groups\ndrivetrain_strafe = DriveTrain(back_motors, front_motors, 319.19, 295, 40, MM, 1)\n\n# Functions\n# Define a function to drive either forward or backward\ndef driving(direction, speed, speedunits, dist, distanceunits):\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain.set_drive_velocity(speed, speedunits)\n    # Drives the drivetrain for the input variables direction and distance\n    drivetrain.drive_for(direction, dist, distanceunits)\n\n# Define a function to strafe either left or right\ndef strafe(direction, speed, speedunits, dist, distanceunits):\n    # Sets a variable so the input can be LEFT or RIGHT in order to avoid confusion\n    side = FORWARD if direction == LEFT else REVERSE\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain_strafe.set_drive_velocity(speed, speedunits)\n    # Strafes the drivetrain for the input variables side and distance\n    drivetrain_strafe.drive_for(side, dist, distanceunits)\n\n# Define a function to rotate either left or right\ndef rotate(direction, speed, speedunits, ang):\n    # Sets the speed of the drivetrain rotation to the input variable speed\n    drivetrain.set_turn_velocity(speed, speedunits)\n    # Rotates the robot for the input variables direction and ang\n    drivetrain.turn_for(direction, ang, DEGREES)\n# End functions\n\n# auton code\ndef autonomous():\n    #Set Start Speed to 50% Increase with testing\n    drivetrain.set_drive_velocity(20, PERCENT)\n \n    #Back up 10 cm to touch corners edge\n    #Attempt 1: Robot front is backing into wall, need to reverse everything\n    #Attempt 2: robot doesnt back up enough, changing from 10, 20 cm\n    drivetrain.drive_for(FORWARD, 220, MM)\n    drivetrain.set_drive_velocity(90, PERCENT)\n    #wait 25 seconds to load all triballs in\n    #Attempt 5: 25 Seconds of extra time, changing to 40 Second Wait\n    #First Half of wait\n    wait(20, SECONDS)\n\n    #Attempt 6: Triballs piled up to much, loading half, pushing partway down, then coming back to load the rest\n    #Push forward 75 CM\n    drivetrain.drive_for(REVERSE, 1500, MM)\n\n    #Backup 80 CM\n    \n\n    \n    \n    drivetrain.drive_for(FORWARD, 1350, MM)\n\n    #Second Half of Wait\n    wait(20, SECONDS)\n\n    #Move forward 175 cm so robot pushes triball to other side of field\n    #Attempt 5: 185 Cm not enough, changing to 200 cm\n    drivetrain.drive_for(REVERSE, 2100, MM)\n    \n    #Attempt 3: Need to backup before turn, making 1750, 1850 and added a 75 cm backup\n    #Back up 75 cm to turn\n    #drivetrain.drive_for(FORWARD, 750, MM)\n\n    #Turn left 45 degrees so robot faces goals\n    #Attempt 4: 45 wasen't enough changing \n    drivetrain.turn_for(LEFT, 90, DEGREES)\n \n    #Move forward 120 cm so triball is pushed under goal\n    drivetrain.drive_for(REVERSE, 1200, MM)\n    \n    drivetrain.set_drive_velocity(80, PERCENT)\n    #Back up 100 cm to leave triballs there\n    drivetrain.drive_for(FORWARD, 1000, MM)\n \n    #Move forward 100 cm to push more triballs under\n    drivetrain.drive_for(REVERSE, 1000, MM)\n    \n    # Backout so we dont touch any triballs\n    drivetrain.drive_for(FORWARD, 500, MM) \n#end auton code\n\n# Driver control code\ndef driver_control():\n    while True:\n        if controller_1.buttonY.pressing():\n            if controller_1.buttonRight.pressing():\n                drivetrain.stop()\n            else:\n                # Move the robot backwards from the wall\n                drivetrain.drive_for(REVERSE, 100, MM)\n                # Rotate the robot 90 degrees to the left\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n                # Move the robot to 1 inch from the wall\n                drivetrain.drive_for(FORWARD, 100, MM)\n                # Rotate the robot 45 degrees to the left\n                drivetrain.turn_for(LEFT, 45, DEGREES)\n                # Move the robot until it is past the bar\n                drivetrain.drive_for(FORWARD, 300, MM)\n                \n        \n        else:\n\n            # Variable to set the speed for the front left motor based on controller joystick position\n            front_left_speed = controller_1.axis3.position() + controller_1.axis4.position() + controller_1.axis1.position()\n            # Variable to set the speed for the front right motor based on controller joystick position\n            front_right_speed = controller_1.axis3.position() - controller_1.axis4.position() - controller_1.axis1.position()\n            # Variable to set the speed for the back left motor based on controller joystick position\n            back_left_speed = controller_1.axis3.position() - controller_1.axis4.position() + controller_1.axis1.position()\n            # Variable to set the speed for the back right motor based on controller joystick position\n            back_right_speed = controller_1.axis3.position() + controller_1.axis4.position() - controller_1.axis1.position()\n\n            # Spin the front left motor based on the controller joystick position\n            front_left_motor.spin(FORWARD, front_left_speed, PERCENT)\n            # Spin the front right motor based on the controller joystick position\n            front_right_motor.spin(FORWARD, front_right_speed, PERCENT)\n            # Spin the back left motor based on the controller joystick position\n            back_left_motor.spin(FORWARD, back_left_speed, PERCENT)\n            # Spin the back right motor based on the controller joystick position\n            back_right_motor.spin(FORWARD, back_right_speed, PERCENT)\n\n    \n        # End autopilot code\n# End driver control code\n\n# Define the competition to run auton and driver control during matches\ncompetition = Competition(driver_control, autonomous)\n\n","textLanguage":"python","rconfig":[{"port":[1,3,2,4,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}